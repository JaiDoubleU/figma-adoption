import { FigmaPartialFile } from "./figma";
export declare type ProcessedPageBreakdown = {
    [teamName: string]: {
        [projectName: string]: {
            pages: (ProcessedPercents & {
                key: string;
                name: string;
                last_modified: string;
            })[];
        };
    };
};
export declare type ProcessedProjectBreakdown = {
    [teamName: string]: {
        [projectName: string]: ProcessedPercents;
    };
};
export declare type ProcessedTeamBreakdown = {
    [teamName: string]: ProcessedPercents;
};
export declare type ProcessedPage = {
    file: FigmaPartialFile;
    pageName: string;
    pageAggregates: AggregateCounts;
};
export declare type ProcessedPercents = {
    adoptionPercent: number;
    lintPercentages: {
        [checkName in LintCheckName]?: LintCheckPercent;
    };
};
export declare type TeamPages = {
    [projectName: string]: {
        [teamName: string]: {
            pages: ProcessedPage[];
        };
    };
};
export declare type AdoptionCalculationOptions = {
    includeMatchingText?: boolean;
    includePartialText?: boolean;
    includePartialFills?: boolean;
};
export declare type LintCheckName = "Text-Style" | "Fill-Style" | "Stroke-Fill-Style";
export declare type MatchLevel = "None" | "Partial" | "Full" | "Skip";
export declare type LintSuggestion = {
    message: string;
    styleKey: string;
};
export declare type LintCheck = {
    checkName: LintCheckName;
    matchLevel: MatchLevel;
    suggestions: LintSuggestion[];
    exactMatch?: {
        key: string;
    };
};
export declare type ProcessedNode = {
    id: string;
    name: string;
    type: string;
    lintChecks: LintCheck[];
    belongsToLibraryComponent: boolean;
    similarComponents: string[];
};
export declare type LintCheckPercent = {
    checkName: LintCheckName;
    full: number;
    partial: number;
};
export declare type AggregateCounts = {
    totalNodes: number;
    hiddenNodes: number;
    libraryNodes: number;
    checks: {
        [checkName in LintCheckName]?: {
            none: number;
            partial: number;
            full: number;
            skip: number;
        };
    };
};
export declare type ProcessedNodeTree = {
    parentNode: {
        id: string;
        name: string;
    };
    aggregateCounts: AggregateCounts;
};
