"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getFigmaPagesForTeam = void 0;
const dayjs_1 = __importDefault(require("dayjs"));
const webapi_1 = require("../webapi");
const wait_1 = __importDefault(require("./wait"));
/**
 * Get all the figma file metadata across entire organization for given teams
 * @param teamIds - the team ids to load files from
 * @param numWeeksAgo - how many weeks ago to start the search, defaults to 2
 * @returns
 */
function getFigmaPagesForTeam(teamIds, numWeeksAgo = 2, useVersionHistory) {
    return __awaiter(this, void 0, void 0, function* () {
        const projectDetails = yield webapi_1.FigmaAPIHelper.getTeamProjects(teamIds);
        const files = [];
        for (const team of projectDetails) {
            for (const proj of team.projects) {
                const newFiles = yield webapi_1.FigmaAPIHelper.getProjectFiles(proj.id);
                for (const file of newFiles) {
                    // merge the team and project names onto the file metadata
                    files.push(Object.assign(file, { teamName: team.name, projectName: proj.name }));
                }
            }
        }
        // a fallback prop, the fimga API is inaccurate to get the last modified time
        if (useVersionHistory) {
            let numFiles = 1;
            // we need to add a timeout
            for (const file of files) {
                numFiles += 1;
                // only files after July are impacted
                if ((0, dayjs_1.default)(file.last_modified).isBefore((0, dayjs_1.default)().subtract(6, "months"))) {
                    continue;
                }
                if (numFiles % 120 === 0) {
                    yield (0, wait_1.default)(60000);
                }
                //console.debug(`Fetching file ${numFiles} of ${files.length}`);
                let versions = yield webapi_1.FigmaAPIHelper.getFileHistory(file.key);
                versions = versions.filter((v) => v.user.handle !== "Figma System");
                // sort with the version created time
                // use that as the latest version
                versions.sort((a, b) => (0, dayjs_1.default)(a.created_at).isBefore((0, dayjs_1.default)(b.created_at)) ? 1 : -1);
                if (versions.length > 0) {
                    const latestDate = versions[0].created_at;
                    // use the last file version date
                    file.last_modified = latestDate;
                }
            }
        }
        const filteredFiles = files.filter((file) => {
            const day = (0, dayjs_1.default)(file.last_modified);
            if (day.isAfter((0, dayjs_1.default)().subtract(numWeeksAgo, "week"))) {
                return true;
            }
            return false;
        });
        return {
            files: filteredFiles,
            counts: {
                total: files.length,
                recentlyModified: filteredFiles.length,
            },
        };
    });
}
exports.getFigmaPagesForTeam = getFigmaPagesForTeam;
