/// <reference types="figma" />
import { FigmaFile, FigmaTeamComponent, FigmaTeamStyle, StyleBucket } from "./models/figma";
import { AdoptionCalculationOptions, AggregateCounts, LintCheck, LintCheckPercent, ProcessedNodeTree, ProcessedPage, ProcessedPageBreakdown, ProcessedPercents, ProcessedProjectBreakdown, ProcessedTeamBreakdown } from "./models/stats";
import FigmaDocumentParser from "./parser";
import { generateComponentMap, generateStyleBucket, generateStyleLookup, LintCheckOptions } from "./rules";
import LintCleaner from "./rules/cleaners";
import { ProcessedNodeOptions } from "./utils/process";
import { getFigmaPagesForTeam } from "./utils/teams";
export * from "./models/stats";
export * from "./models/figma";
export * from "./rules/cleaners";
export declare class FigmaCalculator extends FigmaDocumentParser {
    components: FigmaTeamComponent[];
    allStyles: FigmaTeamStyle[];
    apiToken: string;
    constructor();
    setAPIToken(apiToken: string): void;
    /**
     * Fetches a cloud file, and also does some pre-processing to merge Figma Node and Style Keys for easier lookups
     * @param fileKey - {string}
     * @returns
     */
    fetchCloudDocument(fileKey: string): Promise<FigmaFile>;
    getFilesForTeams: typeof getFigmaPagesForTeam;
    /**
     * Load all of the components from the library
     * @param teamId - the team to load components from
     * @param {filterPrefixes} - an array of strings to throw out the components by
     */
    loadComponents(teamId: string, opts?: {
        filterPrefixes: string[];
    }): Promise<FigmaTeamComponent[]>;
    /**
     * Load all of the valid styles from your library
     *@param teamId - the team id to load styles from
     */
    loadStyles(teamId: string): Promise<FigmaTeamStyle[]>;
    static generateStyleBucket: typeof generateStyleBucket;
    static generateStyleLookup: typeof generateStyleLookup;
    static generateComponentMap: typeof generateComponentMap;
    /**
     *
     * @param rootNode
     * @param opts
     * @returns ProcessedNode
     */
    getLintResults(node: BaseNode, opts?: {
        styles?: FigmaTeamStyle[];
        styleBucket?: StyleBucket;
    } & LintCheckOptions): LintCheck[];
    static filterHiddenNodes(nodes: BaseNode[]): {
        hiddenParentNodes: string[];
        nonHiddenNodes: BaseNode[];
        numHiddenLayers: number;
    };
    /**
     *
     * @param rootNode
     * @param opts
     * @returns boolean
     * Looks at a set of node, and tosses out any nodes that belong to an instance node, and returns elements it finds
     */
    static filterLibraryNodes(nodes: BaseNode[], opts?: {
        components?: FigmaTeamComponent[];
    }): {
        libraryNodes: {
            [nodeId: string]: {
                layers: string[];
                name: string;
            };
        };
        nonLibraryNodes: BaseNode[];
        numLibraryNodes: number;
    };
    /**
     * Looks through a given Figma tree and the checks and processes each of the nodes as individuals. Note: Hidden Nodes are thrown out
     * @param rootNode - Can pass any Figma Node with children
     * @param useEmitter - Streams the results of the process to the emitter in intervals
     */
    processTree(rootNode: BaseNode, opts?: {
        components?: FigmaTeamComponent[];
        allStyles?: FigmaTeamStyle[];
    } & ProcessedNodeOptions): ProcessedNodeTree;
    getAdoptionPercent(aggregates: AggregateCounts[], opts?: AdoptionCalculationOptions): number;
    /**
     * Get the percents of text style usage in files
     * @param processedNodes - array of nodes that have been processed
     */
    getTextStylePercentage(processedNodes: AggregateCounts[], opts?: AdoptionCalculationOptions): LintCheckPercent;
    /**
     * Get the percents of fill style usage in files
     * @param processedNodes - array of nodes that have been processed
     */
    getFillStylePercent(processedNodes: AggregateCounts[], opts?: AdoptionCalculationOptions): LintCheckPercent;
    /**
     * Get a breakdown of adoption percentages by team and project and how they rollup
     * @param allPages - a set of page details and figma file details with processed nodes
     */
    getBreakDownByTeams(pages: ProcessedPage[], opts?: AdoptionCalculationOptions): {
        projects: ProcessedProjectBreakdown;
        teams: ProcessedTeamBreakdown;
        pages: ProcessedPageBreakdown;
        totals: ProcessedPercents;
    };
    /**
     * Runs a set of cleanup functions like removing unused nodes and fills to cleanup a file.
     * WARNING: Running this in a Figma Context will modify your files! Run figma.commitUndo prior
     */
    cleanupTree: typeof LintCleaner.run;
}
