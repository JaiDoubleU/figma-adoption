"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.countLayers = exports.supportsChildren = void 0;
/** Checks if a node can have child nodes
 * @param {SceneNode} node a node in question
 */
function supportsChildren(node) {
    return (node.type === 'FRAME' ||
        node.type === 'GROUP' ||
        node.type === 'COMPONENT' ||
        node.type === 'INSTANCE' ||
        node.type === 'BOOLEAN_OPERATION');
}
exports.supportsChildren = supportsChildren;
/** Counts layers taking their types into account
 * @param {SceneNode[]} nodes array of nodes to count
 */
function countLayers(nodes) {
    // Create a variable to store all the data
    const result = {
        total: 0,
        hidden: 0,
        topLevel: nodes.length,
        types: {},
    };
    // Traverse selected nodes
    for (const node of nodes) {
        // Increase the total (and the number of hidden if necessary)
        result.total++;
        if (!node.visible)
            result.hidden++;
        // Determine the type of the current node and increase the count for the corresponding type
        const { type } = node;
        result.types[type] = !result.types[type] ? 1 : ++result.types[type];
        // If a node supports children, call this function on all its child nodes
        if (supportsChildren(node)) {
            // Cast readonly type of SceneNode[] to a full-fledged SceneNode[]
            const children = node.children;
            // Get the information about the node's children
            const { total, hidden, types } = countLayers(children);
            // If a node is hidden then consider all its children as hidden too
            result.hidden += node.visible ? hidden : total;
            result.total += total;
            // Merge type prop of children nodes with the existing one
            for (const type in types) {
                const current = result.types[type];
                const additional = types[type];
                result.types[type] = !current ? additional : current + additional;
            }
        }
    }
    return result;
}
exports.countLayers = countLayers;
