/// <reference types="figma" />
import { ComponentBucket, FigmaStyleType, FigmaTeamComponent, FigmaTeamStyle, HexStyleMap, PropertyCheck, StyleBucket, StyleLookupMap } from "../models/figma";
import { LintCheck } from "../models/stats";
/**
 * styleLookupMap - required for partial matches
 */
export declare type LintCheckOptions = {
    hexStyleMap?: HexStyleMap;
    styleLookupMap?: StyleLookupMap;
};
/**
 * Run through all partial matches, and make exceptions depending on rules
 */
export declare const runSimilarityChecks: (styleBucket: StyleBucket, targetNode: BaseNode, opts?: LintCheckOptions | undefined) => LintCheck[];
/**
 * Check if a Node Type overlaps
 * @param types
 * @param node
 * @returns
 */
export declare function isNodeOfTypeAndVisible(types: string[], node: BaseNode): boolean;
/**
 *
 * @param styles
 * @returns Object with style type and key as indexer
 * @description Creates a map of styles by name
 */
export declare function generateStyleBucket(styles: FigmaTeamStyle[], opts?: {
    includeNames: boolean;
}): StyleBucket;
export declare function getStyleLookupDefinitions(styleType: FigmaStyleType | "STROKE"): PropertyCheck[] | undefined;
export declare function getStyleLookupKey(checks: PropertyCheck[], node: any, nodeType: "styleNode" | "figmaNode"): string;
export declare function generateStyleLookup(styleBucket: StyleBucket): StyleLookupMap;
/**
 *
 * @param styles
 * @returns Object with style name as key and style as value
 * @description Creates a map of styles by name
 */
export declare function generateComponentMap(components: FigmaTeamComponent[]): ComponentBucket;
